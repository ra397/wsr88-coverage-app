const server = window._env_prod.SERVER_URL;

let map;
let usgsSitesLayer;
const usgsBasinLayers = {}; // Each basin boundary is its own Data layer

let usgsPopulationMap = {};

let isLoading = false;

// Define EPSG:5070 (NAD83 / CONUS Albers Equal Area)
proj4.defs(
  "EPSG:5070",
  "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 " +
  "+lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"
);

// Given a center point (lat, lng) and half-height and half-width in degrees, return the bounds
function getBoundsFromCenter(lat, lng, halfHeightDeg, halfWidthDeg) {
  return {
    north: lat + halfHeightDeg,
    south: lat - halfHeightDeg,
    east: lng + halfWidthDeg,
    west: lng - halfWidthDeg,
  };
}

async function initMap() {
  const centerUSA = { lat: 39.5, lng: -98.35 };

  // Initialize the map
  map = new google.maps.Map(document.getElementById("map"), {
    zoom: 5,
    center: centerUSA,
    draggableCursor: 'crosshair',
    fullscreenControl: false,
    styles: [
      {
        "featureType": "administrative",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                // "color": "#444444"
                // "color": "#8a8a8a"
                "color": "#d2d2d2"
            }
        ]
      },
      {
        "featureType": "landscape",
        "elementType": "all",
        "stylers": [
            {
                "color": "#f2f2f2"
            }
        ]
      },
      {
        "featureType": "poi",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
      },
      {
        "featureType": "road",
        "elementType": "all",
        "stylers": [
            {
                "saturation": -100
            },
            {
                "lightness": 45
            }
        ]
      },
      {
        "featureType": "road.highway",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "simplified"
            }
        ]
      },
      {
        "featureType": "road.arterial",
        "elementType": "labels.icon",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
      },
      {
        "featureType": "transit",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
      },
      {
        "featureType": "water",
        "elementType": "all",
        "stylers": [
            {
                "color": "#46bcec"
            },
            {
                "visibility": "on"
            }
        ]
      }
    ]
  });

  // Load is Radar sites layer
  radarSitesLayer = new markerCollection(map);
  radarSitesLayer.reactClick = radarSiteClicked;
  await radarSitesLayer.init({
    marker_options: {
      markerFill: "red",
      markerStroke: "red",
      markerSize: 3.5
    }
  });
  loadRadarSites(radarSitesLayer);

  // Load in the USGS sites layer
  usgsSitesLayer = new markerCollection(map);
  usgsSitesLayer.reactClick = usgsSiteClicked;
  await usgsSitesLayer.init({
    marker_options: {
      markerFill: "green",
      markerStroke: "green",
      markerSize: 3.5
    }
  });

  loadPopData();

  const usgsSitesURL = window._env_prod.USGS_SITES_URL;
  loadUsgsSites(usgsSitesLayer, usgsSitesURL);

  // Load in population data for each USGS site
  loadUsgsPopulationMap();

  // Event handler when user clicks on a point in the map
  map.addListener("click", (e) => {
    // Do not allow user to click on map if a request is being processed
    if (isLoading) return;

    // Get the lat and lon coordinates of the point that was clicked
    const lat = e.latLng.lat();
    const lng = e.latLng.lng();

    // Convert to epsg:5070 
    const [x5070, y5070] = proj4('EPSG:4326', 'EPSG:5070', [lng, lat]);

    // Get AGL Threshold input
    const maxAlt = getInput(document.getElementById("aglThreshold-input"));
    // Get tower height input
    const towerHeight = getInput(document.getElementById("towerHeight-input"));

    // If the user entered an invalid input, return and do not send radar request
    if (document.getElementById("aglThreshold-input").value && maxAlt === null) return;
    if (document.getElementById("towerHeight-input").value && towerHeight === null) return;

    // Send request to backend
    sendRadarRequest(x5070, y5070, maxAlt, towerHeight);
  });
}

// Send a request to the backend to calculate radar coverage
async function sendRadarRequest(easting, northing, maxAlt = null, towerHeight = null) {
  try {
    isLoading = true;
    showSpinner();

    const beamModel = document.getElementById("beamModel-input").value;

    const payload = {
      easting: easting,
      northing: northing,
    };

    const unitSystem = document.getElementById("units-input").value;
    const metersToFeet = (m) => m * 3.28084;
    const feetToMeters = (m) => m / 3.28084;

    if (maxAlt !== null) {
      if (unitSystem == "metric") {
        payload.max_alt_m = maxAlt;
      } else {
        payload.max_alt_m = feetToMeters(maxAlt);
      }
    }

    if (towerHeight !== null) {
      if (unitSystem == "metric") {
        payload.tower_m = towerHeight;
      } else {
        payload.tower_m = feetToMeters(towerHeight);
      }
    }
  
    const angles = getCheckedElevationAngles();
    if (angles.length > 0) payload.elevation_angles = angles;

    const response = await fetch(`${server}/calculate_blockage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      throw new Error("Radar coverage request failed.");
    }

    
    const blob = await response.blob();
    const imageUrl = URL.createObjectURL(blob);

    // Image metadata
    const pixelSize = 90;         // meters per pixel
    const matrixSize = 5112;      // pixels
    const halfExtent = (pixelSize * matrixSize) / 2;  // = 229905 meters

    // EPSG:5070 bounds
    const bounds5070 = {
      west: easting - halfExtent,
      east: easting + halfExtent,
      south: northing - halfExtent,
      north: northing + halfExtent,
    };

    // Convert EPSG:5070 bounds to EPSG:4326
    const [westLng, southLat] = proj4('EPSG:5070', 'EPSG:4326', [bounds5070.west, bounds5070.south]);
    const [eastLng, northLat] = proj4('EPSG:5070', 'EPSG:4326', [bounds5070.east, bounds5070.north]);

    const overlayBounds = {
      north: northLat,
      south: southLat,
      east: eastLng,
      west: westLng,
    };

    // Add image as a GroundOverlay
    const overlay = new google.maps.GroundOverlay(
      imageUrl,
      overlayBounds,
      { opacity: 0.7 }
    );
    overlay.setMap(map);
  } 
  catch (err) {
    console.log("Error fetching radar coverage: ", err);
  }
  finally {
    isLoading = false;
    hideSpinner();
  }
}

// Toggle the visibility of a sidebar window
function toggleWindow(id) {
  // Close other windows
  document.querySelectorAll('.sidebar-window').forEach(w => {
    if (w.id !== id) w.style.display = 'none';
  });

  const el = document.getElementById(id);
  el.style.display = (el.style.display === 'block') ? 'none' : 'block';
}

// Given an html input element, get the value
// Returns value if value is valid, null otherwise
function getInput(input) {
  // Get the value from the input element
  const value = parseFloat(input.value);
  // Verify the value
  if (value < 0) {
    alert("Please use non-negative values.");
    return null;
  }
  if (isNaN(value) || value < 0) {
    return null;
  }

  return value;
}

function showSpinner() {
  document.getElementById("loading-spinner").style.display = "block";
}

function hideSpinner() {
  document.getElementById("loading-spinner").style.display = "none";
}

// Returns a list of checked elevation angles
function getCheckedElevationAngles() {
  const checkboxes = document.querySelectorAll('#elevation-angle-checkboxes input[type="checkbox"]');
  return Array.from(checkboxes)
              .filter(cb => cb.checked)
              .map(cb => parseFloat(cb.value));
}

document.getElementById("usgsSites-checkbox").addEventListener("change", function () {
  if (this.checked) {
    usgsSitesLayer.show();
  } else {
    usgsSitesLayer.hide();
  }
});

function getArrayBuffer(url) {
    return fetch(url).then(response => response.arrayBuffer());
}

// Load USGS sites from a GeoJSON PBF file
function loadUsgsSites(target, src) {
    getArrayBuffer(src).then((ret) => {
        const pbf = new Pbf(ret);
        const geojson = geobuf.decode(pbf);  // Converts to GeoJSON

        for (let i = 0; i < geojson.features.length; i++) {
            const f = geojson.features[i];
            const c = f.geometry.coordinates;

            // Skip small basins
            if (1 * f.properties.drainage_area < 100) continue;

            target.makeMarker(
                c[1], // latitude
                c[0], // longitude
                {
                    properties: f.properties,
                    clickable: true,
                    optimized: true
                },
                {
                    clickable: true,
                    mouseOver: false,
                    mouseOut: false
                }
            );
        }
        target.hide(); // Do not show initially
    });
}

// Load the USGS population map with maps of USGS site IDs to population counts
function loadUsgsPopulationMap() {
  fetch('public/data/usgs_population_map.json')
    .then(res => res.json())
    .then(data => {
      usgsPopulationMap = data;
    })
    .catch(err => console.error('Error loading population map:', err));
}

// Event handler for when a USGS site marker is clicked
// Displays a label with the USGS site ID, drainage area, and population and loads the basin boundary
function usgsSiteClicked(event, marker) {
  const props = marker.properties || marker.content?.dataset || {};
  const usgsId = props.usgs_id;
  const area = props.drainage_area;
  const population = usgsPopulationMap?.[usgsId] ?? null;
  showLabel(marker, usgsId, area, population);
  loadBasin(usgsId);
}

// Load the basin boundary for a given USGS site ID
async function loadBasin(usgsId) {
  // If this basin is already displayed, do nothing
  if (usgsBasinLayers[usgsId]) {
    return;
  }

  // Otherwise, fetch and show it
  try {
    const buf = await getArrayBuffer(`${window._env_prod.USGS_BOUNDARY_URL}${usgsId}.pbf`);
    const geojson = geobuf.decode(new Pbf(new Uint8Array(buf)));

    const layer = new google.maps.Data({ map });
    layer.addGeoJson(geojson);
    layer.setStyle({
      fillColor: "white",
      fillOpacity: 0.0,
      strokeColor: "black",
      strokeWeight: 1,
    });

    usgsBasinLayers[usgsId] = layer;
  } catch (err) {
    console.error("Error loading basin:", err);
  }
}

// Create a label element with the site ID, area, and optional population
function createLabel(site_id, area, population = null, use_class = 'arrow_rht_box') {
    const div = document.createElement('div');
    div.classList.add(use_class);
    div.setAttribute('style', 'position:absolute; will-change: left, top;');

    let html = `${site_id}<br>Area: ${area.toFixed(1)} km²`;
    if (population !== null) {
        html += `<br>Population: ${population.toLocaleString()}`;
    }

    div.innerHTML = html;
    return div;
}

// Show a label for a marker with the site ID, area, and optional population
function showLabel(marker, site_id, area, population = null) {
    if (marker.customLabel && marker.customLabel.remove) {
        return;
    }
    const labelDiv = createLabel(site_id, area, population, 'arrow_rht_box');
    const label = new infoTool(marker.getMap(), marker.getPosition(), labelDiv);
    marker.customLabel = label;
}

// Updates labels in radar settings menu based on selected units
document.getElementById("units-input").addEventListener("change", function () {
  const unit = this.value;
  
  const aglLabel = document.querySelector("label[for='aglThreshold-input']");
  const towerLabel = document.querySelector("label[for='towerHeight-input']");
  const aglInput = document.getElementById("aglThreshold-input");
  const towerInput = document.getElementById("towerHeight-input");

  if (unit === "metric") {
    aglLabel.textContent = "AGL Threshold (m):";
    towerLabel.textContent = "Tower Height (m):";
    aglInput.placeholder = "e.g. 914.4";
    towerInput.placeholder = "e.g. 30.48";
  } else {
    aglLabel.textContent = "AGL Threshold (ft):";
    towerLabel.textContent = "Tower Height (ft):";
    aglInput.placeholder = "e.g. 3000";
    towerInput.placeholder = "e.g. 100";
  }
});

/* POD */

// Holds the current POD parameters
const podSettings = {
  year:    null,
  season:  'All',
  stops:   32,
  vmin:    0,
  vmax:    50,
  palette: 'Spectral',
  opacity: 1.0
};

const MRMS_BBOX = {
  sw: { lng: -130.004187918, lat:  21.101621507 },
  ne: { lng:  -60.869843652, lat:  52.636274984 }
};

const predef_colors = {
    Spectral:   [
        [215, 25, 28, 255], [215, 27, 29, 255], [216, 29, 31, 255], [216, 30, 32, 255], [216, 32, 33, 255], [217, 34, 34, 255], [217, 36, 36, 255], [217, 38, 37, 255], [218, 39, 38, 255], [218, 41, 39, 255], [218, 43, 41, 255], [218, 45, 42, 255], [219, 47, 43, 255], [219, 48, 45, 255], [219, 50, 46, 255], [220, 52, 47, 255], [220, 54, 48, 255], [220, 56, 50, 255], [221, 57, 51, 255], [221, 59, 52, 255], [221, 61, 53, 255], [222, 63, 55, 255], [222, 65, 56, 255], [222, 66, 57, 255], [223, 68, 59, 255], [223, 70, 60, 255], [223, 72, 61, 255], [223, 74, 62, 255], [224, 75, 64, 255], [224, 77, 65, 255], [224, 79, 66, 255], [225, 81, 67, 255], [225, 83, 69, 255], [225, 84, 70, 255], [226, 86, 71, 255], [226, 88, 73, 255], [226, 90, 74, 255], [227, 91, 75, 255], [227, 93, 76, 255], [227, 95, 78, 255], [228, 97, 79, 255], [228, 99, 80, 255], [228, 100, 81, 255], [228, 102, 83, 255], [229, 104, 84, 255], [229, 106, 85, 255], [229, 108, 87, 255], [230, 109, 88, 255], [230, 111, 89, 255], [230, 113, 90, 255], [231, 115, 92, 255], [231, 117, 93, 255], [231, 118, 94, 255], [232, 120, 95, 255], [232, 122, 97, 255], [232, 124, 98, 255], [233, 126, 99, 255], [233, 127, 101, 255], [233, 129, 102, 255], [233, 131, 103, 255], [234, 133, 104, 255], [234, 135, 106, 255], [234, 136, 107, 255], [235, 138, 108, 255], [235, 140, 110, 255], [235, 142, 111, 255], [236, 144, 112, 255], [236, 145, 113, 255], [236, 147, 115, 255], [237, 149, 116, 255], [237, 151, 117, 255], [237, 153, 118, 255], [238, 154, 120, 255], [238, 156, 121, 255], [238, 158, 122, 255], [238, 160, 124, 255], [239, 162, 125, 255], [239, 163, 126, 255], [239, 165, 127, 255], [240, 167, 129, 255], [240, 169, 130, 255], [240, 171, 131, 255], [241, 172, 132, 255], [241, 174, 134, 255], [241, 176, 135, 255], [242, 178, 136, 255], [242, 180, 138, 255], [242, 181, 139, 255], [243, 183, 140, 255], [243, 185, 141, 255], [243, 187, 143, 255], [243, 189, 144, 255], [244, 190, 145, 255], [244, 192, 146, 255], [244, 194, 148, 255], [245, 196, 149, 255], [245, 198, 150, 255], [245, 199, 152, 255], [246, 201, 153, 255], [246, 203, 154, 255], [246, 205, 155, 255], [247, 206, 157, 255], [247, 208, 158, 255], [247, 210, 159, 255], [248, 212, 160, 255], [248, 214, 162, 255], [248, 215, 163, 255], [248, 217, 164, 255], [249, 219, 166, 255], [249, 221, 167, 255], [249, 223, 168, 255], [250, 224, 169, 255], [250, 226, 171, 255], [250, 228, 172, 255], [251, 230, 173, 255], [251, 232, 174, 255], [251, 233, 176, 255], [252, 235, 177, 255], [252, 237, 178, 255], [252, 239, 180, 255], [253, 241, 181, 255], [253, 242, 182, 255], [253, 244, 183, 255], [253, 246, 185, 255], [254, 248, 186, 255], [254, 250, 187, 255], [254, 251, 188, 255], [255, 253, 190, 255], [255, 255, 191, 255], [253, 254, 191, 255], [252, 253, 191, 255], [250, 252, 191, 255], [248, 251, 191, 255], [247, 250, 191, 255], [245, 249, 191, 255], [244, 248, 191, 255], [242, 247, 191, 255], [240, 246, 191, 255], [239, 245, 191, 255], [237, 245, 191, 255], [235, 244, 191, 255], [234, 243, 190, 255], [232, 242, 190, 255], [231, 241, 190, 255], [229, 240, 190, 255], [227, 239, 190, 255], [226, 238, 190, 255], [224, 237, 190, 255], [222, 236, 190, 255], [221, 235, 190, 255], [219, 234, 190, 255], [218, 233, 190, 255], [216, 232, 190, 255], [214, 231, 190, 255], [213, 230, 190, 255], [211, 229, 190, 255], [209, 228, 190, 255], [208, 227, 190, 255], [206, 226, 190, 255], [205, 225, 190, 255], [203, 225, 190, 255], [201, 224, 190, 255], [200, 223, 190, 255], [198, 222, 190, 255], [196, 221, 190, 255], [195, 220, 190, 255], [193, 219, 189, 255], [192, 218, 189, 255], [190, 217, 189, 255], [188, 216, 189, 255], [187, 215, 189, 255], [185, 214, 189, 255], [183, 213, 189, 255], [182, 212, 189, 255], [180, 211, 189, 255], [179, 210, 189, 255], [177, 209, 189, 255], [175, 208, 189, 255], [174, 207, 189, 255], [172, 206, 189, 255], [170, 205, 189, 255], [169, 205, 189, 255], [167, 204, 189, 255], [166, 203, 189, 255], [164, 202, 189, 255], [162, 201, 189, 255], [161, 200, 189, 255], [159, 199, 189, 255], [157, 198, 189, 255], [156, 197, 189, 255], [154, 196, 189, 255], [153, 195, 189, 255], [151, 194, 188, 255], [149, 193, 188, 255], [148, 192, 188, 255], [146, 191, 188, 255], [144, 190, 188, 255], [143, 189, 188, 255], [141, 188, 188, 255], [139, 187, 188, 255], [138, 186, 188, 255], [136, 185, 188, 255], [135, 185, 188, 255], [133, 184, 188, 255], [131, 183, 188, 255], [130, 182, 188, 255], [128, 181, 188, 255], [126, 180, 188, 255], [125, 179, 188, 255], [123, 178, 188, 255], [122, 177, 188, 255], [120, 176, 188, 255], [118, 175, 188, 255], [117, 174, 188, 255], [115, 173, 188, 255], [113, 172, 188, 255], [112, 171, 188, 255], [110, 170, 187, 255], [109, 169, 187, 255], [107, 168, 187, 255], [105, 167, 187, 255], [104, 166, 187, 255], [102, 165, 187, 255], [100, 165, 187, 255], [99, 164, 187, 255], [97, 163, 187, 255], [96, 162, 187, 255], [94, 161, 187, 255], [92, 160, 187, 255], [91, 159, 187, 255], [89, 158, 187, 255], [87, 157, 187, 255], [86, 156, 187, 255], [84, 155, 187, 255], [83, 154, 187, 255], [81, 153, 187, 255], [79, 152, 187, 255], [78, 151, 187, 255], [76, 150, 187, 255], [74, 149, 187, 255], [73, 148, 187, 255], [71, 147, 187, 255], [70, 146, 186, 255], [68, 145, 186, 255], [66, 145, 186, 255], [65, 144, 186, 255], [63, 143, 186, 255], [61, 142, 186, 255], [60, 141, 186, 255], [58, 140, 186, 255], [57, 139, 186, 255], [55, 138, 186, 255], [53, 137, 186, 255], [52, 136, 186, 255], [50, 135, 186, 255]
    ].reverse(),
    Blues:      [
        [7, 42, 95, 255], [8, 49, 109, 255], [9, 50, 110, 255], [10, 51, 111, 255], [11, 52, 112, 255], [11, 53, 112, 255], [12, 54, 113, 255], [13, 55, 114, 255], [14, 56, 115, 255], [15, 57, 116, 255], [16, 58, 117, 255], [17, 59, 117, 255], [17, 60, 118, 255], [18, 61, 119, 255], [19, 62, 120, 255], [20, 63, 121, 255], [21, 64, 122, 255], [22, 66, 123, 255], [23, 67, 123, 255], [23, 68, 124, 255], [24, 69, 125, 255], [25, 70, 126, 255], [26, 71, 127, 255], [27, 72, 128, 255], [28, 73, 129, 255], [29, 74, 129, 255], [29, 75, 130, 255], [30, 76, 131, 255], [31, 77, 132, 255], [32, 78, 133, 255], [33, 79, 134, 255], [34, 80, 134, 255], [35, 81, 135, 255], [35, 82, 136, 255], [36, 83, 137, 255], [37, 84, 138, 255], [38, 85, 139, 255], [39, 86, 140, 255], [40, 87, 140, 255], [41, 88, 141, 255], [41, 89, 142, 255], [42, 90, 143, 255], [43, 91, 144, 255], [44, 92, 145, 255], [45, 93, 146, 255], [46, 94, 146, 255], [47, 95, 147, 255], [47, 96, 148, 255], [48, 97, 149, 255], [49, 99, 150, 255], [50, 100, 151, 255], [51, 101, 151, 255], [52, 102, 152, 255], [53, 103, 153, 255], [53, 104, 154, 255], [54, 105, 155, 255], [55, 106, 156, 255], [56, 107, 157, 255], [57, 108, 157, 255], [58, 109, 158, 255], [59, 110, 159, 255], [59, 111, 160, 255], [60, 112, 161, 255], [61, 113, 162, 255], [62, 114, 163, 255], [63, 115, 163, 255], [64, 116, 164, 255], [65, 117, 165, 255], [65, 118, 166, 255], [66, 119, 167, 255], [67, 120, 168, 255], [68, 121, 168, 255], [69, 122, 169, 255], [70, 123, 170, 255], [71, 124, 171, 255], [71, 125, 172, 255], [72, 126, 173, 255], [73, 127, 174, 255], [74, 128, 174, 255], [75, 129, 175, 255], [76, 131, 176, 255], [77, 132, 177, 255], [77, 133, 178, 255], [78, 134, 179, 255], [79, 135, 179, 255], [80, 136, 180, 255], [81, 137, 181, 255], [82, 138, 182, 255], [83, 139, 183, 255], [83, 140, 184, 255], [84, 141, 185, 255], [85, 142, 185, 255], [86, 143, 186, 255], [87, 144, 187, 255], [88, 145, 188, 255], [89, 146, 189, 255], [89, 147, 190, 255], [90, 148, 191, 255], [91, 149, 191, 255], [92, 150, 192, 255], [93, 151, 193, 255], [94, 152, 194, 255], [95, 153, 195, 255], [95, 154, 196, 255], [96, 155, 196, 255], [97, 156, 197, 255], [98, 157, 198, 255], [99, 158, 199, 255], [100, 159, 200, 255], [101, 160, 201, 255], [101, 161, 202, 255], [102, 162, 202, 255], [103, 164, 203, 255], [104, 165, 204, 255], [105, 166, 205, 255], [106, 167, 206, 255], [107, 168, 207, 255], [107, 169, 208, 255], [108, 170, 208, 255], [109, 171, 209, 255], [110, 172, 210, 255], [111, 173, 211, 255], [112, 174, 212, 255], [113, 175, 213, 255], [113, 176, 213, 255], [114, 177, 214, 255], [115, 178, 215, 255], [116, 179, 216, 255], [117, 180, 216, 255], [118, 180, 217, 255], [119, 181, 217, 255], [120, 181, 217, 255], [122, 182, 218, 255], [123, 183, 218, 255], [124, 183, 218, 255], [125, 184, 218, 255], [126, 184, 219, 255], [127, 185, 219, 255], [128, 186, 219, 255], [129, 186, 220, 255], [130, 187, 220, 255], [131, 187, 220, 255], [133, 188, 221, 255], [134, 189, 221, 255], [135, 189, 221, 255], [136, 190, 222, 255], [137, 190, 222, 255], [138, 191, 222, 255], [139, 192, 223, 255], [140, 192, 223, 255], [141, 193, 223, 255], [142, 193, 223, 255], [144, 194, 224, 255], [145, 195, 224, 255], [146, 195, 224, 255], [147, 196, 225, 255], [148, 196, 225, 255], [149, 197, 225, 255], [150, 198, 226, 255], [151, 198, 226, 255], [152, 199, 226, 255], [154, 200, 227, 255], [155, 200, 227, 255], [156, 201, 227, 255], [157, 201, 227, 255], [158, 202, 228, 255], [159, 203, 228, 255], [160, 203, 228, 255], [161, 204, 229, 255], [162, 204, 229, 255], [163, 205, 229, 255], [165, 206, 230, 255], [166, 206, 230, 255], [167, 207, 230, 255], [168, 207, 231, 255], [169, 208, 231, 255], [170, 209, 231, 255], [171, 209, 231, 255], [172, 210, 232, 255], [173, 210, 232, 255], [174, 211, 232, 255], [176, 212, 233, 255], [177, 212, 233, 255], [178, 213, 233, 255], [179, 213, 234, 255], [180, 214, 234, 255], [181, 215, 234, 255], [182, 215, 235, 255], [183, 216, 235, 255], [184, 216, 235, 255], [186, 217, 236, 255], [187, 218, 236, 255], [188, 218, 236, 255], [189, 219, 236, 255], [190, 219, 237, 255], [191, 220, 237, 255], [192, 221, 237, 255], [193, 221, 238, 255], [194, 222, 238, 255], [195, 222, 238, 255], [197, 223, 239, 255], [198, 224, 239, 255], [199, 224, 239, 255], [200, 225, 240, 255], [201, 225, 240, 255], [202, 226, 240, 255], [203, 227, 240, 255], [204, 227, 241, 255], [205, 228, 241, 255], [206, 228, 241, 255], [208, 229, 242, 255], [209, 230, 242, 255], [210, 230, 242, 255], [211, 231, 243, 255], [212, 231, 243, 255], [213, 232, 243, 255], [214, 233, 244, 255], [215, 233, 244, 255], [216, 234, 244, 255], [217, 234, 244, 255], [219, 235, 245, 255], [220, 236, 245, 255], [221, 236, 245, 255], [222, 237, 246, 255], [223, 238, 246, 255], [224, 238, 246, 255], [225, 239, 247, 255], [226, 239, 247, 255], [227, 240, 247, 255], [229, 241, 248, 255], [230, 241, 248, 255], [231, 242, 248, 255], [232, 242, 249, 255], [233, 243, 249, 255], [234, 244, 249, 255], [235, 244, 249, 255], [236, 245, 250, 255], [237, 245, 250, 255], [238, 246, 250, 255], [240, 247, 251, 255], [241, 247, 251, 255], [242, 248, 251, 255], [243, 248, 252, 255], [244, 249, 252, 255], [245, 250, 252, 255], [246, 250, 253, 255], [247, 251, 253, 255], [248, 251, 253, 255], [249, 252, 253, 255], [251, 253, 254, 255], [252, 253, 254, 255], [253, 254, 254, 255], [253, 253, 253, 255], [254, 254, 254, 255], [255, 255, 255, 255]

    ].reverse(),
    RedBlue:    [
        [215, 25, 28, 255], [215, 27, 30, 255], [216, 29, 32, 255], [216, 30, 33, 255], [216, 32, 35, 255], [217, 34, 37, 255], [217, 36, 39, 255], [217, 38, 41, 255], [218, 39, 42, 255], [218, 41, 44, 255], [218, 43, 46, 255], [218, 45, 48, 255], [219, 47, 49, 255], [219, 49, 51, 255], [219, 50, 53, 255], [220, 52, 55, 255], [220, 54, 57, 255], [220, 56, 58, 255], [221, 58, 60, 255], [221, 59, 62, 255], [221, 61, 64, 255], [222, 63, 66, 255], [222, 65, 67, 255], [222, 67, 69, 255], [223, 68, 71, 255], [223, 70, 73, 255], [223, 72, 74, 255], [224, 74, 76, 255], [224, 76, 78, 255], [224, 78, 80, 255], [224, 79, 82, 255], [225, 81, 83, 255], [225, 83, 85, 255], [225, 85, 87, 255], [226, 87, 89, 255], [226, 88, 91, 255], [226, 90, 92, 255], [227, 92, 94, 255], [227, 94, 96, 255], [227, 96, 98, 255], [228, 97, 99, 255], [228, 99, 101, 255], [228, 101, 103, 255], [229, 103, 105, 255], [229, 105, 107, 255], [229, 106, 108, 255], [229, 108, 110, 255], [230, 110, 112, 255], [230, 112, 114, 255], [230, 114, 116, 255], [231, 116, 117, 255], [231, 117, 119, 255], [231, 119, 121, 255], [232, 121, 123, 255], [232, 123, 125, 255], [232, 125, 126, 255], [233, 126, 128, 255], [233, 128, 130, 255], [233, 130, 132, 255], [234, 132, 133, 255], [234, 134, 135, 255], [234, 135, 137, 255], [235, 137, 139, 255], [235, 139, 141, 255], [235, 141, 142, 255], [235, 143, 144, 255], [236, 145, 146, 255], [236, 146, 148, 255], [236, 148, 150, 255], [237, 150, 151, 255], [237, 152, 153, 255], [237, 154, 155, 255], [238, 155, 157, 255], [238, 157, 158, 255], [238, 159, 160, 255], [239, 161, 162, 255], [239, 163, 164, 255], [239, 164, 166, 255], [240, 166, 167, 255], [240, 168, 169, 255], [240, 170, 171, 255], [241, 172, 173, 255], [241, 174, 175, 255], [241, 175, 176, 255], [241, 177, 178, 255], [242, 179, 180, 255], [242, 181, 182, 255], [242, 183, 184, 255], [243, 184, 185, 255], [243, 186, 187, 255], [243, 188, 189, 255], [244, 190, 191, 255], [244, 192, 192, 255], [244, 193, 194, 255], [245, 195, 196, 255], [245, 197, 198, 255], [245, 199, 200, 255], [246, 201, 201, 255], [246, 202, 203, 255], [246, 204, 205, 255], [246, 206, 207, 255], [247, 208, 209, 255], [247, 210, 210, 255], [247, 212, 212, 255], [248, 213, 214, 255], [248, 215, 216, 255], [248, 217, 217, 255], [249, 219, 219, 255], [249, 221, 221, 255], [249, 222, 223, 255], [250, 224, 225, 255], [250, 226, 226, 255], [250, 228, 228, 255], [251, 230, 230, 255], [251, 231, 232, 255], [251, 233, 234, 255], [252, 235, 235, 255], [252, 237, 237, 255], [252, 239, 239, 255], [252, 241, 241, 255], [253, 242, 242, 255], [253, 244, 244, 255], [253, 246, 246, 255], [254, 248, 248, 255], [254, 250, 250, 255], [254, 251, 251, 255], [255, 253, 253, 255], [255, 255, 255, 255], [253, 253, 254, 255], [251, 252, 253, 255], [249, 250, 252, 255], [247, 249, 250, 255], [245, 247, 249, 255], [243, 245, 248, 255], [241, 244, 247, 255], [239, 242, 246, 255], [237, 240, 245, 255], [236, 239, 244, 255], [234, 237, 242, 255], [232, 236, 241, 255], [230, 234, 240, 255], [228, 232, 239, 255], [226, 231, 238, 255], [224, 229, 237, 255], [222, 227, 235, 255], [220, 226, 234, 255], [218, 224, 233, 255], [216, 223, 232, 255], [214, 221, 231, 255], [212, 219, 230, 255], [210, 218, 229, 255], [208, 216, 227, 255], [206, 214, 226, 255], [204, 213, 225, 255], [202, 211, 224, 255], [201, 210, 223, 255], [199, 208, 222, 255], [197, 206, 221, 255], [195, 205, 219, 255], [193, 203, 218, 255], [191, 201, 217, 255], [189, 200, 216, 255], [187, 198, 215, 255], [185, 197, 214, 255], [183, 195, 212, 255], [181, 193, 211, 255], [179, 192, 210, 255], [177, 190, 209, 255], [175, 188, 208, 255], [173, 187, 207, 255], [171, 185, 206, 255], [169, 184, 204, 255], [167, 182, 203, 255], [166, 180, 202, 255], [164, 179, 201, 255], [162, 177, 200, 255], [160, 176, 199, 255], [158, 174, 198, 255], [156, 172, 196, 255], [154, 171, 195, 255], [152, 169, 194, 255], [150, 167, 193, 255], [148, 166, 192, 255], [146, 164, 191, 255], [144, 163, 189, 255], [142, 161, 188, 255], [140, 159, 187, 255], [138, 158, 186, 255], [136, 156, 185, 255], [134, 154, 184, 255], [132, 153, 183, 255], [131, 151, 181, 255], [129, 150, 180, 255], [127, 148, 179, 255], [125, 146, 178, 255], [123, 145, 177, 255], [121, 143, 176, 255], [119, 141, 175, 255], [117, 140, 173, 255], [115, 138, 172, 255], [113, 137, 171, 255], [111, 135, 170, 255], [109, 133, 169, 255], [107, 132, 168, 255], [105, 130, 166, 255], [103, 128, 165, 255], [101, 127, 164, 255], [99, 125, 163, 255], [97, 124, 162, 255], [96, 122, 161, 255], [94, 120, 160, 255], [92, 119, 158, 255], [90, 117, 157, 255], [88, 116, 156, 255], [86, 114, 155, 255], [84, 112, 154, 255], [82, 111, 153, 255], [80, 109, 152, 255], [78, 107, 150, 255], [76, 106, 149, 255], [74, 104, 148, 255], [72, 103, 147, 255], [70, 101, 146, 255], [68, 99, 145, 255], [66, 98, 143, 255], [64, 96, 142, 255], [62, 94, 141, 255], [61, 93, 140, 255], [59, 91, 139, 255], [57, 90, 138, 255], [55, 88, 137, 255], [53, 86, 135, 255], [51, 85, 134, 255], [49, 83, 133, 255], [47, 81, 132, 255], [45, 80, 131, 255], [43, 78, 130, 255], [41, 77, 129, 255], [39, 75, 127, 255], [37, 73, 126, 255], [35, 72, 125, 255], [33, 70, 124, 255], [31, 68, 123, 255], [29, 67, 122, 255], [27, 65, 120, 255], [26, 64, 119, 255], [24, 62, 118, 255], [22, 60, 117, 255], [20, 59, 116, 255], [18, 57, 115, 255], [16, 55, 114, 255], [14, 54, 112, 255], [12, 52, 111, 255], [10, 51, 110, 255], [8, 49, 109, 255]
    ].reverse(),
    RedGray:    [
        [215, 27, 30, 255], [ 216, 29, 32, 255], [ 216, 30, 33, 255], [ 216, 32, 35, 255], [ 217, 34, 37, 255], [ 217, 36, 39, 255], [ 217, 38, 40, 255], [ 218, 39, 42, 255], [ 218, 41, 44, 255], [ 218, 43, 46, 255], [ 218, 45, 48, 255], [ 219, 47, 49, 255], [ 219, 48, 51, 255], [ 219, 50, 53, 255], [ 220, 52, 55, 255], [ 220, 54, 56, 255], [ 220, 56, 58, 255], [ 221, 57, 60, 255], [ 221, 59, 62, 255], [ 221, 61, 63, 255], [ 222, 63, 65, 255], [ 222, 65, 67, 255], [ 222, 66, 69, 255], [ 223, 68, 71, 255], [ 223, 70, 72, 255], [ 223, 72, 74, 255], [ 223, 74, 76, 255], [ 224, 75, 78, 255], [ 224, 77, 79, 255], [ 224, 79, 81, 255], [ 225, 81, 83, 255], [ 225, 83, 85, 255], [ 225, 84, 87, 255], [ 226, 86, 88, 255], [ 226, 88, 90, 255], [ 226, 90, 92, 255], [ 227, 91, 94, 255], [ 227, 93, 95, 255], [ 227, 95, 97, 255], [ 228, 97, 99, 255], [ 228, 99, 101, 255], [ 228, 100, 102, 255], [ 228, 102, 104, 255], [ 229, 104, 106, 255], [ 229, 106, 108, 255], [ 229, 108, 110, 255], [ 230, 109, 111, 255], [ 230, 111, 113, 255], [ 230, 113, 115, 255], [ 231, 115, 117, 255], [ 231, 117, 118, 255], [ 231, 118, 120, 255], [ 232, 120, 122, 255], [ 232, 122, 124, 255], [ 232, 124, 126, 255], [ 233, 126, 127, 255], [ 233, 127, 129, 255], [ 233, 129, 131, 255], [ 233, 131, 133, 255], [ 234, 133, 134, 255], [ 234, 135, 136, 255], [ 234, 136, 138, 255], [ 235, 138, 140, 255], [ 235, 140, 142, 255], [ 235, 142, 143, 255], [ 236, 144, 145, 255], [ 236, 145, 147, 255], [ 236, 147, 149, 255], [ 237, 149, 150, 255], [ 237, 151, 152, 255], [ 237, 153, 154, 255], [ 238, 154, 156, 255], [ 238, 156, 157, 255], [ 238, 158, 159, 255], [ 238, 160, 161, 255], [ 239, 162, 163, 255], [ 239, 163, 165, 255], [ 239, 165, 166, 255], [ 240, 167, 168, 255], [ 240, 169, 170, 255], [ 240, 171, 172, 255], [ 241, 172, 173, 255], [ 241, 174, 175, 255], [ 241, 176, 177, 255], [ 242, 178, 179, 255], [ 242, 180, 181, 255], [ 242, 181, 182, 255], [ 243, 183, 184, 255], [ 243, 185, 186, 255], [ 243, 187, 188, 255], [ 243, 189, 189, 255], [ 244, 190, 191, 255], [ 244, 192, 193, 255], [ 244, 194, 195, 255], [ 245, 196, 196, 255], [ 245, 198, 198, 255], [ 245, 199, 200, 255], [ 246, 201, 202, 255], [ 246, 203, 204, 255], [ 246, 205, 205, 255], [ 247, 206, 207, 255], [ 247, 208, 209, 255], [ 247, 210, 211, 255], [ 248, 212, 212, 255], [ 248, 214, 214, 255], [ 248, 215, 216, 255], [ 248, 217, 218, 255], [ 249, 219, 220, 255], [ 249, 221, 221, 255], [ 249, 223, 223, 255], [ 250, 224, 225, 255], [ 250, 226, 227, 255], [ 250, 228, 228, 255], [ 251, 230, 230, 255], [ 251, 232, 232, 255], [ 251, 233, 234, 255], [ 252, 235, 235, 255], [ 252, 237, 237, 255], [ 252, 239, 239, 255], [ 253, 241, 241, 255], [ 253, 242, 243, 255], [ 253, 244, 244, 255], [ 253, 246, 246, 255], [ 254, 248, 248, 255], [ 254, 250, 250, 255], [ 254, 251, 251, 255], [ 255, 253, 253, 255], [ 255, 255, 255, 255], [ 254, 254, 254, 255], [ 252, 252, 252, 255], [ 251, 251, 251, 255], [ 249, 249, 249, 255], [ 248, 248, 248, 255], [ 246, 246, 246, 255], [ 245, 245, 245, 255], [ 243, 243, 243, 255], [ 242, 242, 242, 255], [ 240, 240, 240, 255], [ 239, 239, 239, 255], [ 237, 237, 237, 255], [ 236, 236, 236, 255], [ 234, 234, 234, 255], [ 233, 233, 233, 255], [ 231, 231, 231, 255], [ 230, 230, 230, 255], [ 228, 228, 228, 255], [ 227, 227, 227, 255], [ 225, 225, 225, 255], [ 224, 224, 224, 255], [ 222, 222, 222, 255], [ 221, 221, 221, 255], [ 219, 219, 219, 255], [ 218, 218, 218, 255], [ 216, 216, 216, 255], [ 215, 215, 215, 255], [ 213, 213, 213, 255], [ 212, 212, 212, 255], [ 210, 210, 210, 255], [ 209, 209, 209, 255], [ 208, 208, 208, 255], [ 206, 206, 206, 255], [ 205, 205, 205, 255], [ 203, 203, 203, 255], [ 202, 202, 202, 255], [ 200, 200, 200, 255], [ 199, 199, 199, 255], [ 197, 197, 197, 255], [ 196, 196, 196, 255], [ 194, 194, 194, 255], [ 193, 193, 193, 255], [ 191, 191, 191, 255], [ 190, 190, 190, 255], [ 188, 188, 188, 255], [ 187, 187, 187, 255], [ 185, 185, 185, 255], [ 184, 184, 184, 255], [ 182, 182, 182, 255], [ 181, 181, 181, 255], [ 179, 179, 179, 255], [ 178, 178, 178, 255], [ 176, 176, 176, 255], [ 175, 175, 175, 255], [ 173, 173, 173, 255], [ 172, 172, 172, 255], [ 170, 170, 170, 255], [ 169, 169, 169, 255], [ 167, 167, 167, 255], [ 166, 166, 166, 255], [ 164, 164, 164, 255], [ 163, 163, 163, 255], [ 161, 161, 161, 255], [ 160, 160, 160, 255], [ 159, 159, 159, 255], [ 157, 157, 157, 255], [ 156, 156, 156, 255], [ 154, 154, 154, 255], [ 153, 153, 153, 255], [ 151, 151, 151, 255], [ 150, 150, 150, 255], [ 148, 148, 148, 255], [ 147, 147, 147, 255], [ 145, 145, 145, 255], [ 144, 144, 144, 255], [ 142, 142, 142, 255], [ 141, 141, 141, 255], [ 139, 139, 139, 255], [ 138, 138, 138, 255], [ 136, 136, 136, 255], [ 135, 135, 135, 255], [ 133, 133, 133, 255], [ 132, 132, 132, 255], [ 130, 130, 130, 255], [ 129, 129, 129, 255], [ 127, 127, 127, 255], [ 126, 126, 126, 255], [ 124, 124, 124, 255], [ 123, 123, 123, 255], [ 121, 121, 121, 255], [ 120, 120, 120, 255], [ 118, 118, 118, 255], [ 117, 117, 117, 255], [ 115, 115, 115, 255], [ 114, 114, 114, 255], [ 113, 113, 113, 255], [ 111, 111, 111, 255], [ 110, 110, 110, 255], [ 108, 108, 108, 255], [ 107, 107, 107, 255], [ 105, 105, 105, 255], [ 104, 104, 104, 255], [ 102, 102, 102, 255], [ 101, 101, 101, 255], [ 99, 99, 99, 255], [ 98, 98, 98, 255], [ 96, 96, 96, 255], [ 95, 95, 95, 255], [ 93, 93, 93, 255], [ 92, 92, 92, 255], [ 90, 90, 90, 255], [ 89, 89, 89, 255], [ 87, 87, 87, 255], [ 86, 86, 86, 255], [ 84, 84, 84, 255], [ 83, 83, 83, 255], [ 81, 81, 81, 255], [ 80, 80, 80, 255], [ 78, 78, 78, 255], [ 77, 77, 77, 255], [ 75, 75, 75, 255], [ 74, 74, 74, 255], [ 72, 72, 72, 255], [ 71, 71, 71, 255], [ 69, 69, 69, 255], [ 68, 68, 68, 255], [ 66, 66, 66, 255]
    ].reverse(),
    "Pseudo-IFIS": [
        [77, 12, 8, 255], [80, 13, 8, 255], [83, 14, 9, 255], [85, 15, 9, 255], [88, 16, 9, 255], [91, 17, 9, 255], [94, 18, 10, 255], [97, 19, 10, 255], [100, 19, 10, 255], [103, 20, 10, 255], [105, 21, 11, 255], [108, 22, 11, 255], [111, 23, 11, 255], [114, 24, 11, 255], [117, 25, 12, 255], [120, 26, 12, 255], [123, 27, 12, 255], [126, 28, 12, 255], [128, 29, 12, 255], [131, 30, 13, 255], [134, 31, 13, 255], [137, 32, 13, 255], [140, 33, 13, 255], [143, 34, 14, 255], [146, 35, 14, 255], [148, 35, 14, 255], [151, 36, 14, 255], [154, 37, 15, 255], [157, 38, 15, 255], [160, 39, 15, 255], [163, 40, 15, 255], [166, 41, 16, 255], [168, 42, 16, 255], [171, 43, 16, 255], [174, 44, 16, 255], [177, 45, 16, 255], [180, 46, 17, 255], [183, 47, 17, 255], [186, 48, 17, 255], [189, 49, 17, 255], [191, 50, 18, 255], [194, 51, 18, 255], [197, 51, 18, 255], [200, 52, 18, 255], [203, 53, 19, 255], [206, 54, 19, 255], [209, 55, 19, 255], [211, 56, 19, 255], [214, 57, 20, 255], [220, 57, 20, 255], [217, 58, 20, 255], [220, 59, 20, 255], [221, 61, 20, 255], [221, 64, 19, 255], [221, 66, 19, 255], [221, 68, 19, 255], [222, 70, 19, 255], [222, 72, 18, 255], [222, 75, 18, 255], [222, 77, 18, 255], [223, 79, 18, 255], [223, 81, 18, 255], [223, 83, 17, 255], [223, 86, 17, 255], [224, 88, 17, 255], [224, 90, 17, 255], [224, 92, 17, 255], [224, 94, 16, 255], [225, 97, 16, 255], [225, 99, 16, 255], [225, 101, 16, 255], [225, 103, 15, 255], [226, 105, 15, 255], [226, 108, 15, 255], [226, 110, 15, 255], [226, 112, 15, 255], [227, 114, 14, 255], [227, 116, 14, 255], [227, 118, 14, 255], [227, 121, 14, 255], [228, 123, 14, 255], [228, 125, 13, 255], [228, 127, 13, 255], [228, 129, 13, 255], [229, 132, 13, 255], [229, 134, 12, 255], [229, 136, 12, 255], [229, 138, 12, 255], [230, 140, 12, 255], [230, 143, 12, 255], [230, 145, 11, 255], [230, 147, 11, 255], [231, 149, 11, 255], [231, 151, 11, 255], [231, 154, 11, 255], [231, 156, 10, 255], [232, 158, 10, 255], [232, 160, 10, 255], [232, 162, 10, 255], [232, 165, 9, 255], [233, 167, 9, 255], [233, 167, 7, 255], [233, 169, 9, 255], [233, 170, 10, 255], [234, 172, 12, 255], [234, 174, 14, 255], [234, 176, 16, 255], [234, 177, 17, 255], [234, 179, 19, 255], [235, 181, 21, 255], [235, 183, 23, 255], [235, 184, 24, 255], [235, 186, 26, 255], [235, 188, 28, 255], [236, 189, 29, 255], [236, 191, 31, 255], [236, 193, 33, 255], [236, 195, 35, 255], [236, 196, 36, 255], [237, 198, 38, 255], [237, 200, 40, 255], [237, 202, 42, 255], [237, 203, 43, 255], [237, 205, 45, 255], [238, 207, 47, 255], [238, 208, 48, 255], [238, 210, 50, 255], [238, 212, 52, 255], [238, 214, 54, 255], [238, 215, 55, 255], [239, 217, 57, 255], [239, 219, 59, 255], [239, 220, 60, 255], [239, 222, 62, 255], [239, 224, 64, 255], [240, 226, 66, 255], [240, 227, 67, 255], [240, 229, 69, 255], [240, 231, 71, 255], [240, 233, 73, 255], [241, 234, 74, 255], [241, 236, 76, 255], [241, 238, 78, 255], [241, 239, 79, 255], [241, 241, 81, 255], [242, 243, 83, 255], [242, 245, 85, 255], [242, 246, 86, 255], [242, 248, 88, 255], [242, 250, 90, 255], [243, 252, 92, 255], [243, 253, 93, 255], [243, 255, 95, 255], [241, 255, 94, 255], [239, 255, 93, 255], [238, 254, 93, 255], [236, 254, 92, 255], [234, 254, 91, 255], [232, 254, 90, 255], [231, 254, 89, 255], [229, 254, 89, 255], [227, 253, 88, 255], [225, 253, 87, 255], [223, 253, 86, 255], [222, 253, 85, 255], [220, 253, 85, 255], [218, 253, 84, 255], [216, 252, 83, 255], [214, 252, 82, 255], [213, 252, 81, 255], [211, 252, 81, 255], [209, 252, 80, 255], [207, 251, 79, 255], [206, 251, 78, 255], [204, 251, 77, 255], [202, 251, 77, 255], [200, 251, 76, 255], [198, 251, 75, 255], [197, 250, 74, 255], [195, 250, 73, 255], [193, 250, 72, 255], [191, 250, 72, 255], [189, 250, 71, 255], [188, 250, 70, 255], [186, 249, 69, 255], [184, 249, 68, 255], [182, 249, 68, 255], [181, 249, 67, 255], [179, 249, 66, 255], [177, 248, 65, 255], [175, 248, 64, 255], [173, 248, 64, 255], [172, 248, 63, 255], [170, 248, 62, 255], [168, 248, 61, 255], [166, 247, 60, 255], [164, 247, 60, 255], [163, 247, 59, 255], [161, 247, 58, 255], [159, 247, 57, 255], [157, 247, 56, 255], [156, 246, 56, 255], [154, 246, 55, 255], [152, 246, 54, 255], [151, 245, 58, 255], [149, 245, 61, 255], [148, 244, 65, 255], [147, 243, 69, 255], [146, 243, 73, 255], [144, 242, 76, 255], [143, 241, 80, 255], [142, 241, 84, 255], [141, 240, 88, 255], [139, 239, 91, 255], [138, 239, 95, 255], [137, 238, 99, 255], [135, 237, 102, 255], [134, 237, 106, 255], [133, 236, 110, 255], [132, 235, 114, 255], [130, 235, 117, 255], [129, 234, 121, 255], [128, 233, 125, 255], [127, 233, 129, 255], [125, 232, 132, 255], [124, 231, 136, 255], [123, 231, 140, 255], [121, 230, 143, 255], [120, 229, 147, 255], [119, 229, 151, 255], [118, 228, 155, 255], [116, 227, 158, 255], [115, 227, 162, 255], [114, 226, 166, 255], [112, 225, 169, 255], [111, 225, 173, 255], [110, 224, 177, 255], [109, 223, 181, 255], [107, 223, 184, 255], [106, 222, 188, 255], [105, 221, 192, 255], [104, 221, 196, 255], [102, 220, 199, 255], [101, 219, 203, 255], [100, 219, 207, 255], [98, 218, 210, 255], [97, 217, 214, 255], [96, 217, 218, 255], [95, 216, 222, 255], [93, 215, 225, 255], [92, 215, 229, 255], [91, 214, 233, 255], [90, 213, 237, 255], [88, 213, 240, 255]
    ].reverse()
}

// Create range slider for POD layer
const podRangeSlider = document.getElementById('pod-range-slider');

noUiSlider.create(podRangeSlider, {
  start: [podSettings.vmin, podSettings.vmax],
  connect: true,
  range: { min: 0, max: 100 },
  tooltips: [true, true],
  format: {
    to:   v => Math.round(v),
    from: v => Number(v)
  }
});

let di = null;
let podOverlay = null;
let currentURL = null;

// Given year and season, return start and end date for that season in that year
function getSeasonDates(year, season) {
  let start, end;
  switch (season) {
    case 'Winter': start = new Date(year,0,1);  end = new Date(year,2,31); break;
    case 'Spring': start = new Date(year,3,1);  end = new Date(year,5,30); break;
    case 'Summer': start = new Date(year,6,1);  end = new Date(year,8,30); break;
    case 'Fall':   start = new Date(year,9,1);  end = new Date(year,11,31); break;
    default:       start = new Date(year,0,1);  end = new Date(year,11,31);
  }
  return { start, end };
}

async function fetchAndDrawPOD() {
  showSpinner(); isLoading = true;
  const { start, end } = getSeasonDates(podSettings.year, podSettings.season);
  const url = new POD().getUrl(start, end);

  // If same URL, no need to fetch again
  if (url === currentURL && di) {
    isLoading = false;
    hideSpinner();
    return redrawStylingOnly();
  }
  currentURL = url;

  if (!di) {
    di = new dynaImg();
    di.image = new Image();
    di.image.crossOrigin = '';
  }

  applyPodStylingToDynaImg();

  const blob = await di.load(url);

  if (podOverlay) podOverlay.remove();
  podOverlay = customOverlay(blob, MRMS_BBOX, map, 'GroundOverlay');
  podOverlay.setOpacity(podSettings.opacity);

  isLoading = false; hideSpinner();
}

async function redrawStylingOnly() {
  if (!di) return;               // nothing loaded yet
  applyPodStylingToDynaImg();
  const blob = await di.redraw();
  if (podOverlay) podOverlay.setSource(blob);
}

function applyPodStylingToDynaImg() {
  di.setStops(podSettings.stops);
  di.setRange(podSettings.vmin / 100, podSettings.vmax / 100);
  di.setColors(podSettings.palette, predef_colors[podSettings.palette]);
}

document.getElementById('pod-year-select')
  .addEventListener('change', e => {
    const y = parseInt(e.target.value, 10);
    podSettings.year = isNaN(y) ? null : y;
    if (podSettings.year) {
      fetchAndDrawPOD();
    }
  });

  document.getElementById('pod-season-select')
  .addEventListener('change', e => {
    podSettings.season = e.target.value || 'All';
    if (podSettings.year) {
      fetchAndDrawPOD();
    }
  });


podRangeSlider.noUiSlider.on('update', vals => {
  podSettings.vmin = +vals[0];
  podSettings.vmax = +vals[1];
});
podRangeSlider.noUiSlider.on('set', redrawStylingOnly);

document.getElementById('pod-color-count')
  .addEventListener('change', e => {
    podSettings.stops = +e.target.value;
    redrawStylingOnly();
  });

document.querySelectorAll('input[name="palette"]')
  .forEach(r => r.addEventListener('change', e => {
    podSettings.palette = e.target.value.replace('-', '');
    redrawStylingOnly();
  }));

const opacitySlider = document.getElementById('pod-opacity');
const opacityLabel  = document.getElementById('pod-opacity-value');
opacitySlider.addEventListener('input', e => {
  const pct = +e.target.value;
  opacityLabel.textContent = `${pct}%`;
  podSettings.opacity = pct / 100;
  if (podOverlay) podOverlay.setOpacity(podSettings.opacity);
});

document.getElementById("clear-pod-layer").addEventListener('click', () => {
  podOverlay.remove();
})

/* Precalculated radar sites */
const radarCoverageOverlays = {}

function loadRadarSites(target) {
  fetch('public/data/nexrad_epsg5070.geojson')
  .then(response => response.json())
  .then(data => {
    for (let i = 0; i < data.features.length; i++) {
      const description = data.features[i].properties.description;
      const siteData = extractSiteData(description);
      const coords = {
        latitude: siteData.latitude,
        longitude: siteData.longitude
      };

      target.makeMarker(
        coords.latitude,
        coords.longitude,
        {
          properties: {
            siteID : siteData.siteId,
            easting: data.features[i].geometry.coordinates[0],
            northing: data.features[i].geometry.coordinates[1],
            elevation: siteData.elevation,
          },
          clickable: true,
          optimized: true
        },
        {
          clickable: true,
          mouseOver: false,
          mouseOut: false
        }
      );
    }
  });
}

function extractSiteData(description) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(description, 'text/html');
  const tdElements = Array.from(doc.querySelectorAll('td'));

  let siteId = null;
  let latitude = null;
  let longitude = null;
  let elevation = null;

  tdElements.forEach(td => {
    const text = td.textContent.trim();

    if (text.startsWith("SITE ID")) {
      const match = text.match(/NEXRAD:([A-Z0-9]+)/);
      if (match) siteId = match[1];
    } else if (text.startsWith("LATITUDE")) {
      latitude = parseFloat(text.replace("LATITUDE", "").trim());
    } else if (text.startsWith("LONGITUDE")) {
      longitude = parseFloat(text.replace("LONGITUDE", "").trim());
    } else if (text.startsWith("ELEVATION")) {
      elevation = parseFloat(text.replace("ELEVATION", "").trim());
    }
  });

  return { siteId, latitude, longitude, elevation };
}


function radarSiteClicked(event, marker) {
  if (radarCoverageOverlays[marker.properties.siteID]) {
    // If overlay already exists for this site, remove it
    radarCoverageOverlays[marker.properties.siteID].setMap(null);
    delete radarCoverageOverlays[marker.properties.siteID];
    return;
  }

  const pixelSize = 90;         // meters per pixel
  const matrixSize = 5112;      // pixels
  const halfExtent = (pixelSize * matrixSize) / 2;  // = 229905 meters

  const bounds5070 = {
    west: marker.properties.easting - halfExtent,
    east: marker.properties.easting + halfExtent,
    south: marker.properties.northing - halfExtent,
    north: marker.properties.northing + halfExtent,
  };

  // Convert EPSG:5070 bounds to EPSG:4326
  const [westLng, southLat] = proj4('EPSG:5070', 'EPSG:4326', [bounds5070.west, bounds5070.south]);
  const [eastLng, northLat] = proj4('EPSG:5070', 'EPSG:4326', [bounds5070.east, bounds5070.north]);

  const overlayBounds = {
    north: northLat,
    south: southLat,
    east: eastLng,
    west: westLng,
  };

  const overlay = new google.maps.GroundOverlay(
    `public/data/nexrad_coverages/${marker.properties.siteID}.png`,
    overlayBounds,
    { opacity: 0.7 }
  );
  overlay.setMap(map);
  radarCoverageOverlays[marker.properties.siteID] = overlay;
}

const radarSiteCheckbox = document.getElementById("radarSite-checkbox");
radarSiteCheckbox.addEventListener('click', () => {
  if (radarSiteCheckbox.checked) {
    radarSitesLayer.show();
  } else {
    for (const siteId in radarCoverageOverlays) {
      const overlay = radarCoverageOverlays[siteId];
      overlay.setMap(null);
      delete radarCoverageOverlays[siteId];
    }
    radarSitesLayer.hide();
  }
});

/* Population Threshold Raster */
document.getElementById("popThreshold-slider").addEventListener('input', e => {
  const threshold = +e.target.value;
  document.getElementById("popThreshold-value").textContent = threshold.toLocaleString();
  canvas.style.display = 'block';
  drawRaster(canvas, popData, threshold);
});

let popData = [];
let popData_bounds;
let threshold = 0;
const canvas = document.getElementById("pop-canvas");

function loadPopData() {
  fetch("public/data/usa_ppp_2020_5k_epsg_3857.json")
  .then(res => res.json())
  .then(json => {
    popData = json.data;
    popData_bounds = json.bounds;

    const transformer = proj4("EPSG:3857", "EPSG:4326");
    const [west, south] = transformer.forward([popData_bounds[0], popData_bounds[1]]);
    const [east, north] = transformer.forward([popData_bounds[2], popData_bounds[3]]);

    canvas.width = popData[0].length;
    canvas.height = popData.length;

    const overlayBounds = { north, south, east, west };
    const overlay = new CanvasOverlay(overlayBounds, canvas);
    overlay.setMap(map);
  });
}

function drawRaster(canvas, data, threshold) {
  const ctx = canvas.getContext("2d");
  const width = data[0].length;
  const height = data.length;

  const imageData = ctx.createImageData(width, height);
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const idx = (y * width + x) * 4;
      const value = data[y][x];
      if (value > threshold) {
        imageData.data[idx] = 0;
        imageData.data[idx + 1] = 0;
        imageData.data[idx + 2] = 255;
        imageData.data[idx + 3] = 255;
      } else {
        imageData.data[idx + 3] = 0;
      }
    }
  }
  ctx.putImageData(imageData, 0, 0);
  ctx.imageSmoothingEnabled = false;
}

document.getElementById("clear-pop-layer").addEventListener('click', () => {
  canvas.style.display = 'none';
});